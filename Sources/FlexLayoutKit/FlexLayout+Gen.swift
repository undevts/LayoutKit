// This file is generated by `./scripts/make_swift.sh`.
// swiftlint:disable all

import CoreGraphics

extension FlexLayout {
    // MARK: - margin setters

    /// Sets a different margin amount to each edge of this view.
    ///
    /// - Parameter value: A ``StyleInsets`` instance that contains margin amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(_ value: StyleInsets) -> FlexLayout {
        if style.margin != value {
            style.margin = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to each edge of this view.
    ///
    /// - Parameter length: A `Double` instance that contains margin amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(_ length: Double) -> FlexLayout {
        margin(StyleInsets(StyleValue(from: length)))
    }

    /// Sets a different margin amount to each edge of this view.
    ///
    /// - Note: Same as `margin(StyleInsets(value))`.
    ///
    /// - Parameter value: A ``StyleValue`` instance that contains margin amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(_ value: StyleValue) -> FlexLayout {
        margin(StyleInsets(value))
    }

    /// Sets a different margin amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to margin for this view.
    /// - Parameter length: An amount, given in points, to margin this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(_ edges: StyleInsets.Edge, _ length: Double) -> FlexLayout {
        let next = style.margin.copy(StyleValue(from: length), edges: edges)
        return margin(next)
    }

    /// Sets a different margin amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to margin for this view.
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(_ edges: StyleInsets.Edge, _ value: StyleValue?) -> FlexLayout {
        let next = style.margin.copy(value, edges: edges)
        return margin(next)
    }

    /// Sets a different margin amount to top edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(top value: StyleValue) -> FlexLayout {
        if style.margin.top != value {
            style.margin.top = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to top edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(top length: Double) -> FlexLayout {
        margin(top: StyleValue(from: length))
    }

    /// Sets a different margin amount to left edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(left value: StyleValue) -> FlexLayout {
        if style.margin.left != value {
            style.margin.left = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to left edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(left length: Double) -> FlexLayout {
        margin(left: StyleValue(from: length))
    }

    /// Sets a different margin amount to bottom edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(bottom value: StyleValue) -> FlexLayout {
        if style.margin.bottom != value {
            style.margin.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to bottom edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(bottom length: Double) -> FlexLayout {
        margin(bottom: StyleValue(from: length))
    }

    /// Sets a different margin amount to right edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(right value: StyleValue) -> FlexLayout {
        if style.margin.right != value {
            style.margin.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to right edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(right length: Double) -> FlexLayout {
        margin(right: StyleValue(from: length))
    }

    /// Sets a different margin amount to leading edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(leading value: StyleValue) -> FlexLayout {
        if style.margin.leading != value {
            style.margin.leading = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to leading edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(leading length: Double) -> FlexLayout {
        margin(leading: StyleValue(from: length))
    }

    /// Sets a different margin amount to trailing edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(trailing value: StyleValue) -> FlexLayout {
        if style.margin.trailing != value {
            style.margin.trailing = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to trailing edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(trailing length: Double) -> FlexLayout {
        margin(trailing: StyleValue(from: length))
    }

    /// Sets a different margin amount to horizontal edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(horizontal value: StyleValue) -> FlexLayout {
        if style.margin.left != value || style.margin.right != value {
            style.margin.left = value
            style.margin.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to horizontal edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(horizontal length: Double) -> FlexLayout {
        margin(horizontal: StyleValue(from: length))
    }

    /// Sets a different margin amount to vertical edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to margin this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func margin(vertical value: StyleValue) -> FlexLayout {
        if style.margin.top != value || style.margin.bottom != value {
            style.margin.top = value
            style.margin.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different margin amount to vertical edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to margin this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(vertical length: Double) -> FlexLayout {
        margin(vertical: StyleValue(from: length))
    }


    /// Sets a different margin amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  A ``StyleValue`` instance to margin this view on the left and right edges.
    ///   - vertical:  A ``StyleValue`` instance to margin this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(horizontal: StyleValue, vertical: StyleValue) -> FlexLayout {
        margin(StyleInsets(horizontal: horizontal, vertical: vertical))
    }

    /// Sets a different margin amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  An amount, given in points, to margin this view on the left and right edges.
    ///   - vertical:  An amount, given in points, to margin this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(horizontal: Double, vertical: Double) -> FlexLayout {
        margin(StyleInsets(horizontal: StyleValue(from: horizontal), vertical: StyleValue(from: vertical)))
    }

    /// Sets a different margin amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to margin this view on the top edge.
    ///   - left:  A ``StyleValue`` instance to margin this view on the left edge.
    ///   - bottom:  A ``StyleValue`` instance to margin this view on the bottom edge.
    ///   - right:  A ``StyleValue`` instance to margin this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(top: StyleValue, left: StyleValue, bottom: StyleValue, right: StyleValue) -> FlexLayout {
        margin(StyleInsets(top: top, left: left, bottom: bottom, right: right))
    }

    /// Sets a different margin amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to margin this view on the ltop edge.
    ///   - left:  An amount, given in points, to margin this view on the left edge.
    ///   - bottom:  An amount, given in points, to margin this view on the bottom edge.
    ///   - right:  An amount, given in points, to margin this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(top: Double, left: Double, bottom: Double, right: Double) -> FlexLayout {
        margin(StyleInsets(top: StyleValue(from: top), left: StyleValue(from: left),
            bottom: StyleValue(from: bottom), right: StyleValue(from: right)))
    }

    /// Sets a different margin amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to margin this view on the top edge.
    ///   - leading:  A ``StyleValue`` instance to margin this view on the leading edge.
    ///   - bottom:  A ``StyleValue`` instance to margin this view on the bottom edge.
    ///   - trailing:  A ``StyleValue`` instance to margin this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(top: StyleValue, leading: StyleValue, bottom: StyleValue, trailing: StyleValue) -> FlexLayout {
        margin(StyleInsets(top: top, leading: leading, bottom: bottom, trailing: trailing))
    }

    /// Sets a different margin amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to margin this view on the ltop edge.
    ///   - leading:  An amount, given in points, to margin this view on the leading edge.
    ///   - bottom:  An amount, given in points, to margin this view on the bottom edge.
    ///   - trailing:  An amount, given in points, to margin this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func margin(top: Double, leading: Double, bottom: Double, trailing: Double) -> FlexLayout {
        margin(StyleInsets(top: StyleValue(from: top), leading: StyleValue(from: leading),
            bottom: StyleValue(from: bottom), trailing: StyleValue(from: trailing)))
    }

    // MARK: - padding setters

    /// Sets a different padding amount to each edge of this view.
    ///
    /// - Parameter value: A ``StyleInsets`` instance that contains padding amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(_ value: StyleInsets) -> FlexLayout {
        if style.padding != value {
            style.padding = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to each edge of this view.
    ///
    /// - Parameter length: A `Double` instance that contains padding amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(_ length: Double) -> FlexLayout {
        padding(StyleInsets(StyleValue(from: length)))
    }

    /// Sets a different padding amount to each edge of this view.
    ///
    /// - Note: Same as `padding(StyleInsets(value))`.
    ///
    /// - Parameter value: A ``StyleValue`` instance that contains padding amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(_ value: StyleValue) -> FlexLayout {
        padding(StyleInsets(value))
    }

    /// Sets a different padding amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to padding for this view.
    /// - Parameter length: An amount, given in points, to padding this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(_ edges: StyleInsets.Edge, _ length: Double) -> FlexLayout {
        let next = style.padding.copy(StyleValue(from: length), edges: edges)
        return padding(next)
    }

    /// Sets a different padding amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to padding for this view.
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(_ edges: StyleInsets.Edge, _ value: StyleValue?) -> FlexLayout {
        let next = style.padding.copy(value, edges: edges)
        return padding(next)
    }

    /// Sets a different padding amount to top edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(top value: StyleValue) -> FlexLayout {
        if style.padding.top != value {
            style.padding.top = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to top edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(top length: Double) -> FlexLayout {
        padding(top: StyleValue(from: length))
    }

    /// Sets a different padding amount to left edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(left value: StyleValue) -> FlexLayout {
        if style.padding.left != value {
            style.padding.left = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to left edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(left length: Double) -> FlexLayout {
        padding(left: StyleValue(from: length))
    }

    /// Sets a different padding amount to bottom edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(bottom value: StyleValue) -> FlexLayout {
        if style.padding.bottom != value {
            style.padding.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to bottom edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(bottom length: Double) -> FlexLayout {
        padding(bottom: StyleValue(from: length))
    }

    /// Sets a different padding amount to right edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(right value: StyleValue) -> FlexLayout {
        if style.padding.right != value {
            style.padding.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to right edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(right length: Double) -> FlexLayout {
        padding(right: StyleValue(from: length))
    }

    /// Sets a different padding amount to leading edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(leading value: StyleValue) -> FlexLayout {
        if style.padding.leading != value {
            style.padding.leading = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to leading edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(leading length: Double) -> FlexLayout {
        padding(leading: StyleValue(from: length))
    }

    /// Sets a different padding amount to trailing edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(trailing value: StyleValue) -> FlexLayout {
        if style.padding.trailing != value {
            style.padding.trailing = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to trailing edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(trailing length: Double) -> FlexLayout {
        padding(trailing: StyleValue(from: length))
    }

    /// Sets a different padding amount to horizontal edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(horizontal value: StyleValue) -> FlexLayout {
        if style.padding.left != value || style.padding.right != value {
            style.padding.left = value
            style.padding.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to horizontal edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(horizontal length: Double) -> FlexLayout {
        padding(horizontal: StyleValue(from: length))
    }

    /// Sets a different padding amount to vertical edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to padding this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func padding(vertical value: StyleValue) -> FlexLayout {
        if style.padding.top != value || style.padding.bottom != value {
            style.padding.top = value
            style.padding.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different padding amount to vertical edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to padding this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(vertical length: Double) -> FlexLayout {
        padding(vertical: StyleValue(from: length))
    }


    /// Sets a different padding amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  A ``StyleValue`` instance to padding this view on the left and right edges.
    ///   - vertical:  A ``StyleValue`` instance to padding this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(horizontal: StyleValue, vertical: StyleValue) -> FlexLayout {
        padding(StyleInsets(horizontal: horizontal, vertical: vertical))
    }

    /// Sets a different padding amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  An amount, given in points, to padding this view on the left and right edges.
    ///   - vertical:  An amount, given in points, to padding this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(horizontal: Double, vertical: Double) -> FlexLayout {
        padding(StyleInsets(horizontal: StyleValue(from: horizontal), vertical: StyleValue(from: vertical)))
    }

    /// Sets a different padding amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to padding this view on the top edge.
    ///   - left:  A ``StyleValue`` instance to padding this view on the left edge.
    ///   - bottom:  A ``StyleValue`` instance to padding this view on the bottom edge.
    ///   - right:  A ``StyleValue`` instance to padding this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(top: StyleValue, left: StyleValue, bottom: StyleValue, right: StyleValue) -> FlexLayout {
        padding(StyleInsets(top: top, left: left, bottom: bottom, right: right))
    }

    /// Sets a different padding amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to padding this view on the ltop edge.
    ///   - left:  An amount, given in points, to padding this view on the left edge.
    ///   - bottom:  An amount, given in points, to padding this view on the bottom edge.
    ///   - right:  An amount, given in points, to padding this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(top: Double, left: Double, bottom: Double, right: Double) -> FlexLayout {
        padding(StyleInsets(top: StyleValue(from: top), left: StyleValue(from: left),
            bottom: StyleValue(from: bottom), right: StyleValue(from: right)))
    }

    /// Sets a different padding amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to padding this view on the top edge.
    ///   - leading:  A ``StyleValue`` instance to padding this view on the leading edge.
    ///   - bottom:  A ``StyleValue`` instance to padding this view on the bottom edge.
    ///   - trailing:  A ``StyleValue`` instance to padding this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(top: StyleValue, leading: StyleValue, bottom: StyleValue, trailing: StyleValue) -> FlexLayout {
        padding(StyleInsets(top: top, leading: leading, bottom: bottom, trailing: trailing))
    }

    /// Sets a different padding amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to padding this view on the ltop edge.
    ///   - leading:  An amount, given in points, to padding this view on the leading edge.
    ///   - bottom:  An amount, given in points, to padding this view on the bottom edge.
    ///   - trailing:  An amount, given in points, to padding this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func padding(top: Double, leading: Double, bottom: Double, trailing: Double) -> FlexLayout {
        padding(StyleInsets(top: StyleValue(from: top), leading: StyleValue(from: leading),
            bottom: StyleValue(from: bottom), trailing: StyleValue(from: trailing)))
    }

    // MARK: - border setters

    /// Sets a different border amount to each edge of this view.
    ///
    /// - Parameter value: A ``StyleInsets`` instance that contains border amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(_ value: StyleInsets) -> FlexLayout {
        if style.border != value {
            style.border = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to each edge of this view.
    ///
    /// - Parameter length: A `Double` instance that contains border amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(_ length: Double) -> FlexLayout {
        border(StyleInsets(StyleValue(from: length)))
    }

    /// Sets a different border amount to each edge of this view.
    ///
    /// - Note: Same as `border(StyleInsets(value))`.
    ///
    /// - Parameter value: A ``StyleValue`` instance that contains border amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(_ value: StyleValue) -> FlexLayout {
        border(StyleInsets(value))
    }

    /// Sets a different border amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to border for this view.
    /// - Parameter length: An amount, given in points, to border this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(_ edges: StyleInsets.Edge, _ length: Double) -> FlexLayout {
        let next = style.border.copy(StyleValue(from: length), edges: edges)
        return border(next)
    }

    /// Sets a different border amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to border for this view.
    /// - Parameter value: A ``StyleValue`` instance to border this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(_ edges: StyleInsets.Edge, _ value: StyleValue?) -> FlexLayout {
        let next = style.border.copy(value, edges: edges)
        return border(next)
    }

    /// Sets a different border amount to top edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(top value: StyleValue) -> FlexLayout {
        if style.border.top != value {
            style.border.top = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to top edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(top length: Double) -> FlexLayout {
        border(top: StyleValue(from: length))
    }

    /// Sets a different border amount to left edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(left value: StyleValue) -> FlexLayout {
        if style.border.left != value {
            style.border.left = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to left edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(left length: Double) -> FlexLayout {
        border(left: StyleValue(from: length))
    }

    /// Sets a different border amount to bottom edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(bottom value: StyleValue) -> FlexLayout {
        if style.border.bottom != value {
            style.border.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to bottom edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(bottom length: Double) -> FlexLayout {
        border(bottom: StyleValue(from: length))
    }

    /// Sets a different border amount to right edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(right value: StyleValue) -> FlexLayout {
        if style.border.right != value {
            style.border.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to right edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(right length: Double) -> FlexLayout {
        border(right: StyleValue(from: length))
    }

    /// Sets a different border amount to leading edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(leading value: StyleValue) -> FlexLayout {
        if style.border.leading != value {
            style.border.leading = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to leading edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(leading length: Double) -> FlexLayout {
        border(leading: StyleValue(from: length))
    }

    /// Sets a different border amount to trailing edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(trailing value: StyleValue) -> FlexLayout {
        if style.border.trailing != value {
            style.border.trailing = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to trailing edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(trailing length: Double) -> FlexLayout {
        border(trailing: StyleValue(from: length))
    }

    /// Sets a different border amount to horizontal edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(horizontal value: StyleValue) -> FlexLayout {
        if style.border.left != value || style.border.right != value {
            style.border.left = value
            style.border.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to horizontal edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(horizontal length: Double) -> FlexLayout {
        border(horizontal: StyleValue(from: length))
    }

    /// Sets a different border amount to vertical edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to border this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func border(vertical value: StyleValue) -> FlexLayout {
        if style.border.top != value || style.border.bottom != value {
            style.border.top = value
            style.border.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different border amount to vertical edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to border this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(vertical length: Double) -> FlexLayout {
        border(vertical: StyleValue(from: length))
    }


    /// Sets a different border amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  A ``StyleValue`` instance to border this view on the left and right edges.
    ///   - vertical:  A ``StyleValue`` instance to border this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(horizontal: StyleValue, vertical: StyleValue) -> FlexLayout {
        border(StyleInsets(horizontal: horizontal, vertical: vertical))
    }

    /// Sets a different border amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  An amount, given in points, to border this view on the left and right edges.
    ///   - vertical:  An amount, given in points, to border this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(horizontal: Double, vertical: Double) -> FlexLayout {
        border(StyleInsets(horizontal: StyleValue(from: horizontal), vertical: StyleValue(from: vertical)))
    }

    /// Sets a different border amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to border this view on the top edge.
    ///   - left:  A ``StyleValue`` instance to border this view on the left edge.
    ///   - bottom:  A ``StyleValue`` instance to border this view on the bottom edge.
    ///   - right:  A ``StyleValue`` instance to border this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(top: StyleValue, left: StyleValue, bottom: StyleValue, right: StyleValue) -> FlexLayout {
        border(StyleInsets(top: top, left: left, bottom: bottom, right: right))
    }

    /// Sets a different border amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to border this view on the ltop edge.
    ///   - left:  An amount, given in points, to border this view on the left edge.
    ///   - bottom:  An amount, given in points, to border this view on the bottom edge.
    ///   - right:  An amount, given in points, to border this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(top: Double, left: Double, bottom: Double, right: Double) -> FlexLayout {
        border(StyleInsets(top: StyleValue(from: top), left: StyleValue(from: left),
            bottom: StyleValue(from: bottom), right: StyleValue(from: right)))
    }

    /// Sets a different border amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to border this view on the top edge.
    ///   - leading:  A ``StyleValue`` instance to border this view on the leading edge.
    ///   - bottom:  A ``StyleValue`` instance to border this view on the bottom edge.
    ///   - trailing:  A ``StyleValue`` instance to border this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(top: StyleValue, leading: StyleValue, bottom: StyleValue, trailing: StyleValue) -> FlexLayout {
        border(StyleInsets(top: top, leading: leading, bottom: bottom, trailing: trailing))
    }

    /// Sets a different border amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to border this view on the ltop edge.
    ///   - leading:  An amount, given in points, to border this view on the leading edge.
    ///   - bottom:  An amount, given in points, to border this view on the bottom edge.
    ///   - trailing:  An amount, given in points, to border this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func border(top: Double, leading: Double, bottom: Double, trailing: Double) -> FlexLayout {
        border(StyleInsets(top: StyleValue(from: top), leading: StyleValue(from: leading),
            bottom: StyleValue(from: bottom), trailing: StyleValue(from: trailing)))
    }

    // MARK: - position setters

    /// Sets a different position amount to each edge of this view.
    ///
    /// - Parameter value: A ``StyleInsets`` instance that contains position amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(_ value: StyleInsets) -> FlexLayout {
        if style.position != value {
            style.position = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to each edge of this view.
    ///
    /// - Parameter length: A `Double` instance that contains position amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(_ length: Double) -> FlexLayout {
        position(StyleInsets(StyleValue(from: length)))
    }

    /// Sets a different position amount to each edge of this view.
    ///
    /// - Note: Same as `position(StyleInsets(value))`.
    ///
    /// - Parameter value: A ``StyleValue`` instance that contains position amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(_ value: StyleValue) -> FlexLayout {
        position(StyleInsets(value))
    }

    /// Sets a different position amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to position for this view.
    /// - Parameter length: An amount, given in points, to position this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(_ edges: StyleInsets.Edge, _ length: Double) -> FlexLayout {
        let next = style.position.copy(StyleValue(from: length), edges: edges)
        return position(next)
    }

    /// Sets a different position amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to position for this view.
    /// - Parameter value: A ``StyleValue`` instance to position this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(_ edges: StyleInsets.Edge, _ value: StyleValue?) -> FlexLayout {
        let next = style.position.copy(value, edges: edges)
        return position(next)
    }

    /// Sets a different position amount to top edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(top value: StyleValue) -> FlexLayout {
        if style.position.top != value {
            style.position.top = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to top edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the top edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(top length: Double) -> FlexLayout {
        position(top: StyleValue(from: length))
    }

    /// Sets a different position amount to left edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(left value: StyleValue) -> FlexLayout {
        if style.position.left != value {
            style.position.left = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to left edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the left edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(left length: Double) -> FlexLayout {
        position(left: StyleValue(from: length))
    }

    /// Sets a different position amount to bottom edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(bottom value: StyleValue) -> FlexLayout {
        if style.position.bottom != value {
            style.position.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to bottom edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the bottom edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(bottom length: Double) -> FlexLayout {
        position(bottom: StyleValue(from: length))
    }

    /// Sets a different position amount to right edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(right value: StyleValue) -> FlexLayout {
        if style.position.right != value {
            style.position.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to right edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(right length: Double) -> FlexLayout {
        position(right: StyleValue(from: length))
    }

    /// Sets a different position amount to leading edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(leading value: StyleValue) -> FlexLayout {
        if style.position.leading != value {
            style.position.leading = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to leading edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the leading edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(leading length: Double) -> FlexLayout {
        position(leading: StyleValue(from: length))
    }

    /// Sets a different position amount to trailing edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(trailing value: StyleValue) -> FlexLayout {
        if style.position.trailing != value {
            style.position.trailing = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to trailing edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(trailing length: Double) -> FlexLayout {
        position(trailing: StyleValue(from: length))
    }

    /// Sets a different position amount to horizontal edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(horizontal value: StyleValue) -> FlexLayout {
        if style.position.left != value || style.position.right != value {
            style.position.left = value
            style.position.right = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to horizontal edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the horizontal edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(horizontal length: Double) -> FlexLayout {
        position(horizontal: StyleValue(from: length))
    }

    /// Sets a different position amount to vertical edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to position this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func position(vertical value: StyleValue) -> FlexLayout {
        if style.position.top != value || style.position.bottom != value {
            style.position.top = value
            style.position.bottom = value
            _markDirty()
        }
        return self
    }

    /// Sets a different position amount to vertical edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to position this view on the vertical edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(vertical length: Double) -> FlexLayout {
        position(vertical: StyleValue(from: length))
    }


    /// Sets a different position amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  A ``StyleValue`` instance to position this view on the left and right edges.
    ///   - vertical:  A ``StyleValue`` instance to position this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(horizontal: StyleValue, vertical: StyleValue) -> FlexLayout {
        position(StyleInsets(horizontal: horizontal, vertical: vertical))
    }

    /// Sets a different position amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  An amount, given in points, to position this view on the left and right edges.
    ///   - vertical:  An amount, given in points, to position this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(horizontal: Double, vertical: Double) -> FlexLayout {
        position(StyleInsets(horizontal: StyleValue(from: horizontal), vertical: StyleValue(from: vertical)))
    }

    /// Sets a different position amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to position this view on the top edge.
    ///   - left:  A ``StyleValue`` instance to position this view on the left edge.
    ///   - bottom:  A ``StyleValue`` instance to position this view on the bottom edge.
    ///   - right:  A ``StyleValue`` instance to position this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(top: StyleValue, left: StyleValue, bottom: StyleValue, right: StyleValue) -> FlexLayout {
        position(StyleInsets(top: top, left: left, bottom: bottom, right: right))
    }

    /// Sets a different position amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to position this view on the ltop edge.
    ///   - left:  An amount, given in points, to position this view on the left edge.
    ///   - bottom:  An amount, given in points, to position this view on the bottom edge.
    ///   - right:  An amount, given in points, to position this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(top: Double, left: Double, bottom: Double, right: Double) -> FlexLayout {
        position(StyleInsets(top: StyleValue(from: top), left: StyleValue(from: left),
            bottom: StyleValue(from: bottom), right: StyleValue(from: right)))
    }

    /// Sets a different position amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to position this view on the top edge.
    ///   - leading:  A ``StyleValue`` instance to position this view on the leading edge.
    ///   - bottom:  A ``StyleValue`` instance to position this view on the bottom edge.
    ///   - trailing:  A ``StyleValue`` instance to position this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(top: StyleValue, leading: StyleValue, bottom: StyleValue, trailing: StyleValue) -> FlexLayout {
        position(StyleInsets(top: top, leading: leading, bottom: bottom, trailing: trailing))
    }

    /// Sets a different position amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to position this view on the ltop edge.
    ///   - leading:  An amount, given in points, to position this view on the leading edge.
    ///   - bottom:  An amount, given in points, to position this view on the bottom edge.
    ///   - trailing:  An amount, given in points, to position this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func position(top: Double, leading: Double, bottom: Double, trailing: Double) -> FlexLayout {
        position(StyleInsets(top: StyleValue(from: top), leading: StyleValue(from: leading),
            bottom: StyleValue(from: bottom), trailing: StyleValue(from: trailing)))
    }


    // MARK: - width setters

    @discardableResult
    public func width(_ value: StyleValue) -> FlexLayout {
        if style.width != value {
            style.width = value
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func width(_ length: Double) -> FlexLayout {
        width(StyleValue(from: length))
    }

    // MARK: - height setters

    @discardableResult
    public func height(_ value: StyleValue) -> FlexLayout {
        if style.height != value {
            style.height = value
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func height(_ length: Double) -> FlexLayout {
        height(StyleValue(from: length))
    }

    // MARK: - minWidth setters

    @discardableResult
    public func minWidth(_ value: StyleValue) -> FlexLayout {
        if style.minWidth != value {
            style.minWidth = value
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func minWidth(_ length: Double) -> FlexLayout {
        minWidth(StyleValue(from: length))
    }

    // MARK: - minHeight setters

    @discardableResult
    public func minHeight(_ value: StyleValue) -> FlexLayout {
        if style.minHeight != value {
            style.minHeight = value
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func minHeight(_ length: Double) -> FlexLayout {
        minHeight(StyleValue(from: length))
    }

    // MARK: - maxWidth setters

    @discardableResult
    public func maxWidth(_ value: StyleValue?) -> FlexLayout {
        if style.maxWidth != value {
            style.maxWidth = value
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func maxWidth(_ length: Double?) -> FlexLayout {
        maxWidth(length.map(StyleValue.init(from:)))
    }

    // MARK: - maxHeight setters

    @discardableResult
    public func maxHeight(_ value: StyleValue?) -> FlexLayout {
        if style.maxHeight != value {
            style.maxHeight = value
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func maxHeight(_ length: Double?) -> FlexLayout {
        maxHeight(length.map(StyleValue.init(from:)))
    }


    // MARK: - size setters

    @discardableResult
    public func size(width: StyleValue, height: StyleValue) -> FlexLayout {
        if style.width != width || style.height != height {
            style.width = width
            style.height = height
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func size(width: Double, height: Double) -> FlexLayout {
        size(width: StyleValue(from: width), height: StyleValue(from: height))
    }

    @inlinable
    @discardableResult
    public func size(_ value: CGSize) -> FlexLayout {
        size(width: StyleValue(from: value.width), height: StyleValue(from: value.height))
    }

    @inlinable
    @discardableResult
    public func size(_ value: StyleValue) -> FlexLayout {
        size(width: value, height: value)
    }

    @inlinable
    @discardableResult
    public func size(_ length: Double) -> FlexLayout {
        size(StyleValue(from: length))
    }

    // MARK: - minSize setters

    @discardableResult
    public func minSize(width: StyleValue, height: StyleValue) -> FlexLayout {
        if style.minWidth != width || style.minHeight != height {
            style.minWidth = width
            style.minHeight = height
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func minSize(width: Double, height: Double) -> FlexLayout {
        minSize(width: StyleValue(from: width), height: StyleValue(from: height))
    }

    @inlinable
    @discardableResult
    public func minSize(_ value: CGSize) -> FlexLayout {
        minSize(width: StyleValue(from: value.width), height: StyleValue(from: value.height))
    }

    @inlinable
    @discardableResult
    public func minSize(_ value: StyleValue) -> FlexLayout {
        minSize(width: value, height: value)
    }

    @inlinable
    @discardableResult
    public func minSize(_ length: Double) -> FlexLayout {
        minSize(StyleValue(from: length))
    }

    // MARK: - maxSize setters

    @discardableResult
    public func maxSize(width: StyleValue?, height: StyleValue?) -> FlexLayout {
        if style.maxWidth != width || style.maxHeight != height {
            style.maxWidth = width
            style.maxHeight = height
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
    public func maxSize(width: Double, height: Double) -> FlexLayout {
        maxSize(width: StyleValue(from: width), height: StyleValue(from: height))
    }

    @inlinable
    @discardableResult
    public func maxSize(_ value: CGSize) -> FlexLayout {
        maxSize(width: StyleValue(from: value.width), height: StyleValue(from: value.height))
    }

    @inlinable
    @discardableResult
    public func maxSize(_ value: StyleValue?) -> FlexLayout {
        maxSize(width: value, height: value)
    }

    @inlinable
    @discardableResult
    public func maxSize(_ length: Double) -> FlexLayout {
        maxSize(StyleValue(from: length))
    }


}
