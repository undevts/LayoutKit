%{
kinds = ['margin', 'padding', 'border', 'position']
edges = ['top', 'left', 'bottom', 'right', 'leading', 'trailing', 'horizontal', 'vertical']
dimensions = ['width', 'height', 'minWidth', 'minHeight', 'maxWidth', 'maxHeight']
sizes = ['size', 'minSize', 'maxSize' ]
}%
// This file is generated by `./scripts/make_swift.sh`.
// swiftlint:disable all

import CoreGraphics

extension FlexLayout {
% for kind in kinds:
    // MARK: - ${kind} setters

    /// Sets a different ${kind} amount to each edge of this view.
    ///
    /// - Parameter value: A ``StyleInsets`` instance that contains ${kind} amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func ${kind}(_ value: StyleInsets) -> FlexLayout {
        if style.${kind} != value {
            style.${kind} = value
            _markDirty()
        }
        return self
    }

    /// Sets a different ${kind} amount to each edge of this view.
    ///
    /// - Parameter length: A `Double` instance that contains ${kind} amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(_ length: Double) -> FlexLayout {
        ${kind}(StyleInsets(StyleValue(from: length)))
    }

    /// Sets a different ${kind} amount to each edge of this view.
    ///
    /// - Note: Same as `${kind}(StyleInsets(value))`.
    ///
    /// - Parameter value: A ``StyleValue`` instance that contains ${kind} amounts for each edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(_ value: StyleValue) -> FlexLayout {
        ${kind}(StyleInsets(value))
    }

    /// Sets a different ${kind} amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to ${kind} for this view.
    /// - Parameter length: An amount, given in points, to ${kind} this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func ${kind}(_ edges: StyleInsets.Edge, _ length: Double) -> FlexLayout {
        let next = style.${kind}.copy(StyleValue(from: length), edges: edges)
        return ${kind}(next)
    }

    /// Sets a different ${kind} amount to each edge of this view.
    ///
    /// - Parameter edges: The set of edges to ${kind} for this view.
    /// - Parameter value: A ``StyleValue`` instance to ${kind} this view on the specified edges.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func ${kind}(_ edges: StyleInsets.Edge, _ value: StyleValue?) -> FlexLayout {
        let next = style.${kind}.copy(value, edges: edges)
        return ${kind}(next)
    }

% for edge in edges:
    /// Sets a different ${kind} amount to ${edge} edge of this view.
    ///
    /// - Parameter value: A ``StyleValue`` instance to ${kind} this view on the ${edge} edge.
    /// - Returns: Self, for fluent method call.
    @discardableResult
    public func ${kind}(${edge} value: StyleValue) -> FlexLayout {
% if edge == 'horizontal':
        if style.${kind}.left != value || style.${kind}.right != value {
            style.${kind}.left = value
            style.${kind}.right = value
            _markDirty()
        }
% elif edge == 'vertical':
        if style.${kind}.top != value || style.${kind}.bottom != value {
            style.${kind}.top = value
            style.${kind}.bottom = value
            _markDirty()
        }
% else:
        if style.${kind}.${edge} != value {
            style.${kind}.${edge} = value
            _markDirty()
        }
% end
        return self
    }

    /// Sets a different ${kind} amount to ${edge} edge of this view.
    ///
    /// - Parameter length: An amount, given in points, to ${kind} this view on the ${edge} edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(${edge} length: Double) -> FlexLayout {
        ${kind}(${edge}: StyleValue(from: length))
    }

% end

    /// Sets a different ${kind} amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  A ``StyleValue`` instance to ${kind} this view on the left and right edges.
    ///   - vertical:  A ``StyleValue`` instance to ${kind} this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(horizontal: StyleValue, vertical: StyleValue) -> FlexLayout {
        ${kind}(StyleInsets(horizontal: horizontal, vertical: vertical))
    }

    /// Sets a different ${kind} amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - horizontal:  An amount, given in points, to ${kind} this view on the left and right edges.
    ///   - vertical:  An amount, given in points, to ${kind} this view on the top and bottom edges.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(horizontal: Double, vertical: Double) -> FlexLayout {
        ${kind}(StyleInsets(horizontal: StyleValue(from: horizontal), vertical: StyleValue(from: vertical)))
    }

    /// Sets a different ${kind} amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to ${kind} this view on the top edge.
    ///   - left:  A ``StyleValue`` instance to ${kind} this view on the left edge.
    ///   - bottom:  A ``StyleValue`` instance to ${kind} this view on the bottom edge.
    ///   - right:  A ``StyleValue`` instance to ${kind} this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(top: StyleValue, left: StyleValue, bottom: StyleValue, right: StyleValue) -> FlexLayout {
        ${kind}(StyleInsets(top: top, left: left, bottom: bottom, right: right))
    }

    /// Sets a different ${kind} amount to top, left, bottom and right edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to ${kind} this view on the ltop edge.
    ///   - left:  An amount, given in points, to ${kind} this view on the left edge.
    ///   - bottom:  An amount, given in points, to ${kind} this view on the bottom edge.
    ///   - right:  An amount, given in points, to ${kind} this view on the right edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(top: Double, left: Double, bottom: Double, right: Double) -> FlexLayout {
        ${kind}(StyleInsets(top: StyleValue(from: top), left: StyleValue(from: left),
            bottom: StyleValue(from: bottom), right: StyleValue(from: right)))
    }

    /// Sets a different ${kind} amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  A ``StyleValue`` instance to ${kind} this view on the top edge.
    ///   - leading:  A ``StyleValue`` instance to ${kind} this view on the leading edge.
    ///   - bottom:  A ``StyleValue`` instance to ${kind} this view on the bottom edge.
    ///   - trailing:  A ``StyleValue`` instance to ${kind} this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(top: StyleValue, leading: StyleValue, bottom: StyleValue, trailing: StyleValue) -> FlexLayout {
        ${kind}(StyleInsets(top: top, leading: leading, bottom: bottom, trailing: trailing))
    }

    /// Sets a different ${kind} amount to top, leading, bottom and trailing edges of this view.
    ///
    /// - Parameters:
    ///   - top:  An amount, given in points, to ${kind} this view on the ltop edge.
    ///   - leading:  An amount, given in points, to ${kind} this view on the leading edge.
    ///   - bottom:  An amount, given in points, to ${kind} this view on the bottom edge.
    ///   - trailing:  An amount, given in points, to ${kind} this view on the trailing edge.
    /// - Returns: Self, for fluent method call.
    @inlinable
    @discardableResult
    public func ${kind}(top: Double, leading: Double, bottom: Double, trailing: Double) -> FlexLayout {
        ${kind}(StyleInsets(top: StyleValue(from: top), leading: StyleValue(from: leading),
            bottom: StyleValue(from: bottom), trailing: StyleValue(from: trailing)))
    }

% end

% for dimension in dimensions:
    // MARK: - ${dimension} setters

    @discardableResult
% if dimension == 'maxWidth' or dimension == 'maxHeight':
    public func ${dimension}(_ value: StyleValue?) -> FlexLayout {
% else:
    public func ${dimension}(_ value: StyleValue) -> FlexLayout {
% end
        if style.${dimension} != value {
            style.${dimension} = value
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
% if dimension == 'maxWidth' or dimension == 'maxHeight':
    public func ${dimension}(_ length: Double?) -> FlexLayout {
        ${dimension}(length.map(StyleValue.init(from:)))
% else:
    public func ${dimension}(_ length: Double) -> FlexLayout {
        ${dimension}(StyleValue(from: length))
% end
    }

% end

% for size in sizes:
    // MARK: - ${size} setters

    @discardableResult
% if size == 'maxSize':
    public func ${size}(width: StyleValue?, height: StyleValue?) -> FlexLayout {
        if style.maxWidth != width || style.maxHeight != height {
            style.maxWidth = width
            style.maxHeight = height
% elif size == 'minSize':
    public func ${size}(width: StyleValue, height: StyleValue) -> FlexLayout {
        if style.minWidth != width || style.minHeight != height {
            style.minWidth = width
            style.minHeight = height
% else:
    public func ${size}(width: StyleValue, height: StyleValue) -> FlexLayout {
        if style.width != width || style.height != height {
            style.width = width
            style.height = height
% end
            _markDirty()
        }
        return self
    }

    @inlinable
    @discardableResult
% if dimension == 'maxSize':
    public func ${size}(width: Double?, height: Double?) -> FlexLayout {
        ${size}(width: width.map(StyleValue.init(from:)), height: height.map(StyleValue.init(from:)))
% else:
    public func ${size}(width: Double, height: Double) -> FlexLayout {
        ${size}(width: StyleValue(from: width), height: StyleValue(from: height))
% end
    }

    @inlinable
    @discardableResult
% if dimension == 'maxSize':
    public func ${size}(_ value: CGSize?) -> FlexLayout {
        ${size}(width: value.width.map(StyleValue.init(from:)), height: value.height.map(StyleValue.init(from:)))
% else:
    public func ${size}(_ value: CGSize) -> FlexLayout {
        ${size}(width: StyleValue(from: value.width), height: StyleValue(from: value.height))
% end
    }

    @inlinable
    @discardableResult
% if size == 'maxSize':
    public func ${size}(_ value: StyleValue?) -> FlexLayout {
% else:
    public func ${size}(_ value: StyleValue) -> FlexLayout {
% end
        ${size}(width: value, height: value)
    }

    @inlinable
    @discardableResult
% if dimension == 'maxSize':
    public func ${size}(_ length: Double?) -> FlexLayout {
        ${size}(length.map(StyleValue.init(from:)))
% else:
    public func ${size}(_ length: Double) -> FlexLayout {
        ${size}(StyleValue(from: length))
% end
    }

% end

}
